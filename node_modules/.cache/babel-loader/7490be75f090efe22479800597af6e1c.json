{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('http:localhost:8000/api/user/register', user).then(res => history.push('/login')).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const loginUser = (email, password) => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    email,\n    password\n  });\n  axios.post('http://localhost:8000/api/user/login', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(res => {\n    const token = res.data.token.token;\n    localStorage.setItem('jwtToken', token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n  }).catch(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/actions/authentication.js"],"names":["axios","GET_ERRORS","setAuthToken","jwt_decode","qs","SET_CURRENT_USER","registerUser","user","history","dispatch","post","then","res","push","catch","err","type","payload","loginUser","email","password","auth","stringify","headers","token","data","localStorage","setItem","decoded","setCurrentUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,gBAAT,QAAiC,SAAjC;AAGA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmBC,QAAQ,IAAI;AACvDT,EAAAA,KAAK,CAACU,IAAN,CAAW,uCAAX,EAAoDH,IAApD,EACSI,IADT,CACcC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CADrB,EAESC,KAFT,CAEeC,GAAG,IAAI;AACVN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEf,UADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAPT;AAQH,CATM;AAWP,OAAO,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAoBX,QAAQ,IAAI;AACzD;AACG,QAAMY,IAAI,GAAEjB,EAAE,CAACkB,SAAH,CAAa;AAACH,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAb,CAAZ;AACCpB,EAAAA,KAAK,CAACU,IAAN,CAAW,sCAAX,EAAkDW,IAAlD,EAAwD;AAAEE,IAAAA,OAAO,EAAE;AAC/D,sBAAgB;AAD+C;AAAX,GAAxD,EAISZ,IAJT,CAIcC,GAAG,IAAI;AAAA,UACDY,KADC,GACSZ,GAAG,CAACa,IAAJ,CAASD,KADlB,CACDA,KADC;AAETE,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAtB,IAAAA,YAAY,CAACsB,KAAD,CAAZ;AACA,UAAMI,OAAO,GAAGzB,UAAU,CAACqB,KAAD,CAA1B;AACAf,IAAAA,QAAQ,CAACoB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,GAVT,EAWSd,KAXT,CAWeF,GAAG,IAAI;AACVH,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEf,UADD;AAELgB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAhBT;AAiBH,CApBM;AAqBP,OAAO,MAAMY,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHZ,IAAAA,IAAI,EAAEX,gBADH;AAEHY,IAAAA,OAAO,EAAEW;AAFN,GAAP;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\n\n\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('http:localhost:8000/api/user/register', user)\n            .then(res => history.push('/login'))\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\n\nexport const loginUser = (email,password) => dispatch => {\n//server not accept json data so i use qs (form data urlencode)\n   const auth= qs.stringify({email,password})\n    axios.post('http://localhost:8000/api/user/login',auth ,{ headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }}\n  )\n            .then(res => {\n                const { token } = res.data.token;\n                localStorage.setItem('jwtToken', token);\n                setAuthToken(token);\n                const decoded = jwt_decode(token);\n                dispatch(setCurrentUser(decoded));\n            })\n            .catch(res => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}"]},"metadata":{},"sourceType":"module"}