{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { ALWAYS_FLOAT_TYPES, cssClasses, numbers, strings, VALIDATION_ATTR_WHITELIST } from './constants';\nvar POINTERDOWN_EVENTS = ['mousedown', 'touchstart'];\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCTextFieldFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCTextFieldFoundation, _super);\n  /**\n   * @param adapter\n   * @param foundationMap Map from subcomponent names to their subfoundations.\n   */\n\n\n  function MDCTextFieldFoundation(adapter, foundationMap) {\n    if (foundationMap === void 0) {\n      foundationMap = {};\n    }\n\n    var _this = _super.call(this, tslib_1.__assign({}, MDCTextFieldFoundation.defaultAdapter, adapter)) || this;\n\n    _this.isFocused_ = false;\n    _this.receivedUserInput_ = false;\n    _this.isValid_ = true;\n    _this.useNativeValidation_ = true;\n    _this.helperText_ = foundationMap.helperText;\n    _this.characterCounter_ = foundationMap.characterCounter;\n    _this.leadingIcon_ = foundationMap.leadingIcon;\n    _this.trailingIcon_ = foundationMap.trailingIcon;\n\n    _this.inputFocusHandler_ = function () {\n      return _this.activateFocus();\n    };\n\n    _this.inputBlurHandler_ = function () {\n      return _this.deactivateFocus();\n    };\n\n    _this.inputInputHandler_ = function () {\n      return _this.handleInput();\n    };\n\n    _this.setPointerXOffset_ = function (evt) {\n      return _this.setTransformOrigin(evt);\n    };\n\n    _this.textFieldInteractionHandler_ = function () {\n      return _this.handleTextFieldInteraction();\n    };\n\n    _this.validationAttributeChangeHandler_ = function (attributesList) {\n      return _this.handleValidationAttributeChange(attributesList);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCTextFieldFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldAlwaysFloat_\", {\n    get: function () {\n      var type = this.getNativeInput_().type;\n      return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldFloat\", {\n    get: function () {\n      return this.shouldAlwaysFloat_ || this.isFocused_ || Boolean(this.getValue()) || this.isBadInput_();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation.prototype, \"shouldShake\", {\n    get: function () {\n      return !this.isFocused_ && !this.isValid() && Boolean(this.getValue());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        hasClass: function () {\n          return true;\n        },\n        registerTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterTextFieldInteractionHandler: function () {\n          return undefined;\n        },\n        registerInputInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInputInteractionHandler: function () {\n          return undefined;\n        },\n        registerValidationAttributeChangeHandler: function () {\n          return new MutationObserver(function () {\n            return undefined;\n          });\n        },\n        deregisterValidationAttributeChangeHandler: function () {\n          return undefined;\n        },\n        getNativeInput: function () {\n          return null;\n        },\n        isFocused: function () {\n          return false;\n        },\n        activateLineRipple: function () {\n          return undefined;\n        },\n        deactivateLineRipple: function () {\n          return undefined;\n        },\n        setLineRippleTransformOrigin: function () {\n          return undefined;\n        },\n        shakeLabel: function () {\n          return undefined;\n        },\n        floatLabel: function () {\n          return undefined;\n        },\n        hasLabel: function () {\n          return false;\n        },\n        getLabelWidth: function () {\n          return 0;\n        },\n        hasOutline: function () {\n          return false;\n        },\n        notchOutline: function () {\n          return undefined;\n        },\n        closeOutline: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCTextFieldFoundation.prototype.init = function () {\n    var _this = this;\n\n    if (this.adapter_.isFocused()) {\n      this.inputFocusHandler_();\n    } else if (this.adapter_.hasLabel() && this.shouldFloat) {\n      this.notchOutline(true);\n      this.adapter_.floatLabel(true);\n    }\n\n    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);\n    POINTERDOWN_EVENTS.forEach(function (evtType) {\n      _this.adapter_.registerInputInteractionHandler(evtType, _this.setPointerXOffset_);\n    });\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.adapter_.registerTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);\n    });\n    this.validationObserver_ = this.adapter_.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_);\n    this.setCharacterCounter_(this.getValue().length);\n  };\n\n  MDCTextFieldFoundation.prototype.destroy = function () {\n    var _this = this;\n\n    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);\n    POINTERDOWN_EVENTS.forEach(function (evtType) {\n      _this.adapter_.deregisterInputInteractionHandler(evtType, _this.setPointerXOffset_);\n    });\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.adapter_.deregisterTextFieldInteractionHandler(evtType, _this.textFieldInteractionHandler_);\n    });\n    this.adapter_.deregisterValidationAttributeChangeHandler(this.validationObserver_);\n  };\n  /**\n   * Handles user interactions with the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleTextFieldInteraction = function () {\n    var nativeInput = this.adapter_.getNativeInput();\n\n    if (nativeInput && nativeInput.disabled) {\n      return;\n    }\n\n    this.receivedUserInput_ = true;\n  };\n  /**\n   * Handles validation attribute changes\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleValidationAttributeChange = function (attributesList) {\n    var _this = this;\n\n    attributesList.some(function (attributeName) {\n      if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n        _this.styleValidity_(true);\n\n        return true;\n      }\n\n      return false;\n    });\n\n    if (attributesList.indexOf('maxlength') > -1) {\n      this.setCharacterCounter_(this.getValue().length);\n    }\n  };\n  /**\n   * Opens/closes the notched outline.\n   */\n\n\n  MDCTextFieldFoundation.prototype.notchOutline = function (openNotch) {\n    if (!this.adapter_.hasOutline()) {\n      return;\n    }\n\n    if (openNotch) {\n      var isDense = this.adapter_.hasClass(cssClasses.DENSE);\n      var labelScale = isDense ? numbers.DENSE_LABEL_SCALE : numbers.LABEL_SCALE;\n      var labelWidth = this.adapter_.getLabelWidth() * labelScale;\n      this.adapter_.notchOutline(labelWidth);\n    } else {\n      this.adapter_.closeOutline();\n    }\n  };\n  /**\n   * Activates the text field focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.activateFocus = function () {\n    this.isFocused_ = true;\n    this.styleFocused_(this.isFocused_);\n    this.adapter_.activateLineRipple();\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  };\n  /**\n   * Sets the line ripple's transform origin, so that the line ripple activate\n   * animation will animate out from the user's click location.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTransformOrigin = function (evt) {\n    var touches = evt.touches;\n    var targetEvent = touches ? touches[0] : evt;\n    var targetClientRect = targetEvent.target.getBoundingClientRect();\n    var normalizedX = targetEvent.clientX - targetClientRect.left;\n    this.adapter_.setLineRippleTransformOrigin(normalizedX);\n  };\n  /**\n   * Handles input change of text input and text area.\n   */\n\n\n  MDCTextFieldFoundation.prototype.handleInput = function () {\n    this.autoCompleteFocus();\n    this.setCharacterCounter_(this.getValue().length);\n  };\n  /**\n   * Activates the Text Field's focus state in cases when the input value\n   * changes without user input (e.g. programmatically).\n   */\n\n\n  MDCTextFieldFoundation.prototype.autoCompleteFocus = function () {\n    if (!this.receivedUserInput_) {\n      this.activateFocus();\n    }\n  };\n  /**\n   * Deactivates the Text Field's focus state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.deactivateFocus = function () {\n    this.isFocused_ = false;\n    this.adapter_.deactivateLineRipple();\n    var isValid = this.isValid();\n    this.styleValidity_(isValid);\n    this.styleFocused_(this.isFocused_);\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n\n    if (!this.shouldFloat) {\n      this.receivedUserInput_ = false;\n    }\n  };\n\n  MDCTextFieldFoundation.prototype.getValue = function () {\n    return this.getNativeInput_().value;\n  };\n  /**\n   * @param value The value to set on the input Element.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValue = function (value) {\n    // Prevent Safari from moving the caret to the end of the input when the value has not changed.\n    if (this.getValue() !== value) {\n      this.getNativeInput_().value = value;\n    }\n\n    this.setCharacterCounter_(value.length);\n    var isValid = this.isValid();\n    this.styleValidity_(isValid);\n\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n  };\n  /**\n   * @return The custom validity state, if set; otherwise, the result of a native validity check.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isValid = function () {\n    return this.useNativeValidation_ ? this.isNativeInputValid_() : this.isValid_;\n  };\n  /**\n   * @param isValid Sets the custom validity state of the Text Field.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setValid = function (isValid) {\n    this.isValid_ = isValid;\n    this.styleValidity_(isValid);\n    var shouldShake = !isValid && !this.isFocused_;\n\n    if (this.adapter_.hasLabel()) {\n      this.adapter_.shakeLabel(shouldShake);\n    }\n  };\n  /**\n   * Enables or disables the use of native validation. Use this for custom validation.\n   * @param useNativeValidation Set this to false to ignore native input validation.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setUseNativeValidation = function (useNativeValidation) {\n    this.useNativeValidation_ = useNativeValidation;\n  };\n\n  MDCTextFieldFoundation.prototype.isDisabled = function () {\n    return this.getNativeInput_().disabled;\n  };\n  /**\n   * @param disabled Sets the text-field disabled or enabled.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setDisabled = function (disabled) {\n    this.getNativeInput_().disabled = disabled;\n    this.styleDisabled_(disabled);\n  };\n  /**\n   * @param content Sets the content of the helper text.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setHelperTextContent = function (content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconAriaLabel = function (label) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the leading icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setLeadingIconContent = function (content) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setContent(content);\n    }\n  };\n  /**\n   * Sets the aria label of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconAriaLabel = function (label) {\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setAriaLabel(label);\n    }\n  };\n  /**\n   * Sets the text content of the trailing icon.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setTrailingIconContent = function (content) {\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setContent(content);\n    }\n  };\n  /**\n   * Sets character counter values that shows characters used and the total character limit.\n   */\n\n\n  MDCTextFieldFoundation.prototype.setCharacterCounter_ = function (currentLength) {\n    if (!this.characterCounter_) {\n      return;\n    }\n\n    var maxLength = this.getNativeInput_().maxLength;\n\n    if (maxLength === -1) {\n      throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');\n    }\n\n    this.characterCounter_.setCounterValue(currentLength, maxLength);\n  };\n  /**\n   * @return True if the Text Field input fails in converting the user-supplied value.\n   */\n\n\n  MDCTextFieldFoundation.prototype.isBadInput_ = function () {\n    // The badInput property is not supported in IE 11 💩.\n    return this.getNativeInput_().validity.badInput || false;\n  };\n  /**\n   * @return The result of native validity checking (ValidityState.valid).\n   */\n\n\n  MDCTextFieldFoundation.prototype.isNativeInputValid_ = function () {\n    return this.getNativeInput_().validity.valid;\n  };\n  /**\n   * Styles the component based on the validity state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleValidity_ = function (isValid) {\n    var INVALID = MDCTextFieldFoundation.cssClasses.INVALID;\n\n    if (isValid) {\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.addClass(INVALID);\n    }\n\n    if (this.helperText_) {\n      this.helperText_.setValidity(isValid);\n    }\n  };\n  /**\n   * Styles the component based on the focused state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleFocused_ = function (isFocused) {\n    var FOCUSED = MDCTextFieldFoundation.cssClasses.FOCUSED;\n\n    if (isFocused) {\n      this.adapter_.addClass(FOCUSED);\n    } else {\n      this.adapter_.removeClass(FOCUSED);\n    }\n  };\n  /**\n   * Styles the component based on the disabled state.\n   */\n\n\n  MDCTextFieldFoundation.prototype.styleDisabled_ = function (isDisabled) {\n    var _a = MDCTextFieldFoundation.cssClasses,\n        DISABLED = _a.DISABLED,\n        INVALID = _a.INVALID;\n\n    if (isDisabled) {\n      this.adapter_.addClass(DISABLED);\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.removeClass(DISABLED);\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setDisabled(isDisabled);\n    }\n\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setDisabled(isDisabled);\n    }\n  };\n  /**\n   * @return The native text input element from the host environment, or an object with the same shape for unit tests.\n   */\n\n\n  MDCTextFieldFoundation.prototype.getNativeInput_ = function () {\n    // this.adapter_ may be undefined in foundation unit tests. This happens when testdouble is creating a mock object\n    // and invokes the shouldShake/shouldFloat getters (which in turn call getValue(), which calls this method) before\n    // init() has been called from the MDCTextField constructor. To work around that issue, we return a dummy object.\n    var nativeInput = this.adapter_ ? this.adapter_.getNativeInput() : null;\n    return nativeInput || {\n      disabled: false,\n      maxLength: -1,\n      type: 'input',\n      validity: {\n        badInput: false,\n        valid: true\n      },\n      value: ''\n    };\n  };\n\n  return MDCTextFieldFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldFoundation;","map":null,"metadata":{},"sourceType":"module"}