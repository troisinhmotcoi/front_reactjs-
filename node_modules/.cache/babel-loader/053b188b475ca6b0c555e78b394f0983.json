{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\nimport { SECRET_POST } from './types';\nimport { history } from '../helper';\nimport { Redirect } from 'react-router';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('http:localhost:8000/api/user/register', user).then(res => history.push('/login')).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const loginUser = (email, password) => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    email,\n    password\n  });\n  axios.post('http://127.0.0.1:8000/api/user/login', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(res => {\n    if (!res.data == false) {\n      sessionStorage.setItem('jwtToken', JSON.stringify(res.data.remember_token));\n      setAuthToken(res.data.remember_token);\n      const decoded = jwt_decode(res.data.remember_token);\n      dispatch(setCurrentUser(decoded));\n      history.push('/home');\n    }\n  }).catch(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const logoutUser = () => dispatch => {\n  sessionStorage.removeItem('jwtToken');\n};\nexport const secretUser = password => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    password\n  });\n  axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/secret', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(res => {\n    if (!res.data == false) {\n      sessionStorage.setItem('secret', JSON.stringify(res.data));\n      history.push('/about'); //dispatch(secretPost(res_h.content));\n    }\n  });\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport function authHeader() {\n  // return authorization header with jwt token\n  const currentUser = authenticationService.currentUserValue;\n\n  if (currentUser && currentUser.token) {\n    return {\n      Authorization: \"Bearer \".concat(currentUser.token)\n    };\n  } else {\n    return {};\n  }\n}\nexport const getAll = () => {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch('http://127.0.0.1:8000/api/user');\n};","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/actions/authentication.js"],"names":["axios","GET_ERRORS","setAuthToken","jwt_decode","qs","SET_CURRENT_USER","SECRET_POST","history","Redirect","registerUser","user","dispatch","post","then","res","push","catch","err","type","payload","loginUser","email","password","auth","stringify","headers","data","sessionStorage","setItem","JSON","remember_token","decoded","setCurrentUser","logoutUser","removeItem","secretUser","authHeader","currentUser","authenticationService","currentUserValue","token","Authorization","getAll","requestOptions","method","fetch"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER} from './types';\nimport {SECRET_POST} from './types';\nimport { history } from '../helper';\nimport { Redirect }  from 'react-router';\n\n\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('http:localhost:8000/api/user/register', user)\n            .then(res => history.push('/login'))\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\n\nexport  const loginUser = (email,password) => dispatch => {\n//server not accept json data so i use qs (form data urlencode)\n   const auth= qs.stringify({email,password})\n    axios.post('http://127.0.0.1:8000/api/user/login',auth ,{ headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }}\n  )\n\n            .then(         \n                res=>{\n                    \n                    if (!res.data==false) {\n                         \n                      \n               \n                sessionStorage.setItem('jwtToken', JSON.stringify(res.data.remember_token));\n                setAuthToken(res.data.remember_token);\n                const decoded = jwt_decode(res.data.remember_token);\n                dispatch(setCurrentUser(decoded));\n                history.push('/home');\n            }\n        }\n            )\n            \n\n            \n            .catch(res => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\nexport const logoutUser=()=>dispatch=>{\n    sessionStorage.removeItem('jwtToken');\n\n}\n\nexport  const secretUser = (password) => dispatch => {\n    //server not accept json data so i use qs (form data urlencode)\n       const auth= qs.stringify({password})\n        axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/secret',auth ,{ headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          }}\n      )\n    \n                .then(         \n                    res=>{\n                        if (!res.data==false) {\n                            sessionStorage.setItem('secret',JSON.stringify(res.data));\n                             history.push('/about');\n\n\n                          //dispatch(secretPost(res_h.content));\n                }\n            }\n                )}\n                \n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n \n}\n\nexport function authHeader() {\n    // return authorization header with jwt token\n    const currentUser = authenticationService.currentUserValue;\n    if (currentUser && currentUser.token) {\n        return { Authorization: `Bearer ${currentUser.token}` };\n    } else {\n        return {};\n    }\n}\nexport const getAll=()=>{\n    const requestOptions = { method: 'GET', headers: authHeader() };\n    return fetch('http://127.0.0.1:8000/api/user')\n}"]},"metadata":{},"sourceType":"module"}