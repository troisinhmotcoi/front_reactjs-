{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\nimport { SECRET_POST } from './types';\nimport { history } from '../helper';\nimport { Redirect } from 'react-router';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('http:localhost:8000/api/user/register', user).then(res => history.push('/login')).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const loginUser = (email, password) => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    email,\n    password\n  });\n  axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/login', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(res => {\n    if (!res.data.remember_token == false) {\n      history.push('/');\n      res.json();\n      const token = res.data.token.token;\n      localStorage.setItem('jwtToken', token);\n      setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(setCurrentUser(decoded));\n    }\n  }).catch(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const secretUser = password => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    password\n  });\n  axios.post('http://localhost:8000/api/user/secret', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(res => {\n    if (!res.data == false) {\n      //const baiviet=bviet[\"content\"]\n      localStorage.setItem('secret', res_h.content);\n      history.push('/about'); //dispatch(secretPost(res_h.content));\n    }\n  });\n};\n/*export const secretPost=res_h.content => {\n    return {\n        type: SECRET_POST,\n        payload: res_h.content\n    }\n}*/\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/actions/authentication.js"],"names":["axios","GET_ERRORS","setAuthToken","jwt_decode","qs","SET_CURRENT_USER","SECRET_POST","history","Redirect","registerUser","user","dispatch","post","then","res","push","catch","err","type","payload","loginUser","email","password","auth","stringify","headers","data","remember_token","json","token","localStorage","setItem","decoded","setCurrentUser","secretUser","res_h","content"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,gBAAT,QAAgC,SAAhC;AACA,SAAQC,WAAR,QAA0B,SAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAA0B,cAA1B;AAGA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOH,OAAP,KAAmBI,QAAQ,IAAI;AACvDX,EAAAA,KAAK,CAACY,IAAN,CAAW,uCAAX,EAAoDF,IAApD,EACSG,IADT,CACcC,GAAG,IAAIP,OAAO,CAACQ,IAAR,CAAa,QAAb,CADrB,EAESC,KAFT,CAEeC,GAAG,IAAI;AACVN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEjB,UADD;AAELkB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAPT;AAQH,CATM;AAWP,OAAQ,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAoBX,QAAQ,IAAI;AAC1D;AACG,QAAMY,IAAI,GAAEnB,EAAE,CAACoB,SAAH,CAAa;AAACH,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAb,CAAZ;AACCtB,EAAAA,KAAK,CAACY,IAAN,CAAW,uDAAX,EAAmEW,IAAnE,EAAyE;AAAEE,IAAAA,OAAO,EAAE;AAChF,sBAAgB;AADgE;AAAX,GAAzE,EAKSZ,IALT,CAMYC,GAAG,IAAE;AAED,QAAI,CAACA,GAAG,CAACY,IAAJ,CAASC,cAAV,IAA0B,KAA9B,EAAqC;AAChCpB,MAAAA,OAAO,CAACQ,IAAR,CAAa,GAAb;AAEVD,MAAAA,GAAG,CAACc,IAAJ;AAH0C,YAIjCC,KAJiC,GAIvBf,GAAG,CAACY,IAAJ,CAASG,KAJc,CAIjCA,KAJiC;AAKzCC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACA3B,MAAAA,YAAY,CAAC2B,KAAD,CAAZ;AACA,YAAMG,OAAO,GAAG7B,UAAU,CAAC0B,KAAD,CAA1B;AACAlB,MAAAA,QAAQ,CAACsB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH;AACJ,GAlBL,EAuBShB,KAvBT,CAuBeF,GAAG,IAAI;AACVH,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEjB,UADD;AAELkB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GA5BT;AA6BH,CAhCO;AAiCR,OAAQ,MAAMe,UAAU,GAAIZ,QAAD,IAAcX,QAAQ,IAAI;AACjD;AACG,QAAMY,IAAI,GAAEnB,EAAE,CAACoB,SAAH,CAAa;AAACF,IAAAA;AAAD,GAAb,CAAZ;AACCtB,EAAAA,KAAK,CAACY,IAAN,CAAW,uCAAX,EAAmDW,IAAnD,EAAyD;AAAEE,IAAAA,OAAO,EAAE;AAChE,sBAAgB;AADgD;AAAX,GAAzD,EAKSZ,IALT,CAMYC,GAAG,IAAE;AACD,QAAI,CAACA,GAAG,CAACY,IAAL,IAAW,KAAf,EAAsB;AAEjB;AACDI,MAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA8BI,KAAK,CAACC,OAApC;AACC7B,MAAAA,OAAO,CAACQ,IAAR,CAAa,QAAb,EAJiB,CAOpB;AACT;AACJ,GAhBL;AAiBU,CApBV;AAsBQ;;;;;;;AAMhB,OAAO,MAAMkB,cAAc,GAAGD,OAAO,IAAI;AACrC,SAAO;AACHd,IAAAA,IAAI,EAAEb,gBADH;AAEHc,IAAAA,OAAO,EAAEa;AAFN,GAAP;AAKH,CANM","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER} from './types';\nimport {SECRET_POST} from './types';\nimport { history } from '../helper';\nimport { Redirect }  from 'react-router';\n\n\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('http:localhost:8000/api/user/register', user)\n            .then(res => history.push('/login'))\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\n\nexport  const loginUser = (email,password) => dispatch => {\n//server not accept json data so i use qs (form data urlencode)\n   const auth= qs.stringify({email,password})\n    axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/login',auth ,{ headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }}\n  )\n\n            .then(         \n                res=>{\n                    \n                    if (!res.data.remember_token==false) {\n                         history.push('/');\n                      \n               res.json();\n                const { token } = res.data.token;\n                localStorage.setItem('jwtToken', token);\n                setAuthToken(token);\n                const decoded = jwt_decode(token);\n                dispatch(setCurrentUser(decoded));\n            }\n        }\n            )\n            \n\n            \n            .catch(res => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\nexport  const secretUser = (password) => dispatch => {\n    //server not accept json data so i use qs (form data urlencode)\n       const auth= qs.stringify({password})\n        axios.post('http://localhost:8000/api/user/secret',auth ,{ headers: {\n            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n          }}\n      )\n    \n                .then(         \n                    res=>{\n                        if (!res.data==false) {\n                            \n                             //const baiviet=bviet[\"content\"]\n                            localStorage.setItem('secret',res_h.content);\n                             history.push('/about');\n\n\n                          //dispatch(secretPost(res_h.content));\n                }\n            }\n                )}\n                \n                /*export const secretPost=res_h.content => {\n                    return {\n                        type: SECRET_POST,\n                        payload: res_h.content\n                    }\n                }*/\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n \n}\n"]},"metadata":{},"sourceType":"module"}