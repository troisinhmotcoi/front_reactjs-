{"ast":null,"code":"var _jsxFileName = \"/home/anhhuynh/front_reactjs-/src/components/navbar/ArticlePage.js\";\nimport React, { Component } from 'react';\nimport PlayerAPI from '../api';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { read } from 'fs'; // The Player looks up the player using the number parsed from\n// the URL's pathname. If no player is found with the given\n// number, then a \"player not found\" message is displayed.\n\nexport default class ArticlePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  /* const article = PlayerAPI.get(\n     parseInt(props.match.params.id, 10)\n   )\n   if (!article) {\n     return <div>Sorry, but the article was not found</div>\n   }\n   return (\n     <div>\n       <h1>{article.title}</h1>\n       <h2>Position: {article.content}</h2>\n       <Link to='/article'>Back</Link>\n     </div>\n   )\n  }\n  export default ArticlePage\n  */\n  async componentDidMount() {\n    const id = this.props.match.params.id;\n    const characterNames = [];\n    await axios.get(\"https://neunhuladinhmenh.herokuapp.com/api/polls\").then(data => this.setState({\n      data: data\n    }));\n    return await data.json();\n  }\n\n  render() {\n    const data = this.state.data;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, data.map(datai => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, datai.content);\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/components/navbar/ArticlePage.js"],"names":["React","Component","PlayerAPI","Link","axios","read","ArticlePage","state","data","componentDidMount","id","props","match","params","characterNames","get","then","setState","json","render","map","datai","content"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,IAArB,C,CACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SACjDM,KADiD,GACzC;AAENC,MAAAA,IAAI,EAAE;AAFA,KADyC;AAAA;;AAMlD;;;;;;;;;;;;;;;;AAiBD,QAAMC,iBAAN,GAA2B;AACzB,UAAMC,EAAE,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,EAAnC;AACA,UAAMI,cAAc,GAAG,EAAvB;AAEC,UAAMV,KAAK,CAACW,GAAN,qDAGNC,IAHM,CAGDR,IAAI,IAAI,KAAKS,QAAL,CAAc;AAACT,MAAAA,IAAI,EAACA;AAAN,KAAd,CAHP,CAAN;AAIH,WAAO,MAAMA,IAAI,CAACU,IAAL,EAAb;AACC;;AACAC,EAAAA,MAAM,GAAI;AAAA,UACAX,IADA,GACQ,KAAKD,KADb,CACAC,IADA;AAEP,WACJ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGWA,IAAI,CAACY,GAAL,CAASC,KAAK,IAAI;AACjB,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMA,KAAK,CAACC,OAAZ,CADA;AAEE,KAHH,CAHX,CADI;AAcF;;AAjDiD","sourcesContent":["import React, {Component}  from 'react'\nimport PlayerAPI from '../api'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport { read } from 'fs';\n// The Player looks up the player using the number parsed from\n// the URL's pathname. If no player is found with the given\n// number, then a \"player not found\" message is displayed.\nexport default class ArticlePage extends Component {\n  state = {\n    \n    data: []\n  };\n\n /* const article = PlayerAPI.get(\n    parseInt(props.match.params.id, 10)\n  )\n  if (!article) {\n    return <div>Sorry, but the article was not found</div>\n  }\n  return (\n    <div>\n      <h1>{article.title}</h1>\n      <h2>Position: {article.content}</h2>\n      <Link to='/article'>Back</Link>\n    </div>\n  )\n}\n\nexport default ArticlePage\n*/\nasync componentDidMount () {\n  const id = this.props.match.params.id\n  const characterNames = [];\n  \n   await axios.get (\n    `https://neunhuladinhmenh.herokuapp.com/api/polls`\n  )\n  .then(data => this.setState({data:data}))\nreturn await data.json();\n}\n render () {\n    const {data} = this.state;\n    return(\n<React.Fragment>\n        \n          \n          {data.map(datai => {\n            return(\n            <div>{datai.content}</div>\n            )}\n            )\n             }   \n          \n          \n        \n        </React.Fragment>)\n }\n}\n"]},"metadata":{},"sourceType":"module"}