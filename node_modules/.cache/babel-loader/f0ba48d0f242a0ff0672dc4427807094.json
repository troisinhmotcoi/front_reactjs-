{"ast":null,"code":"export const GET_ERRORS = 'GET_ERRORS';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SECRET_POST = 'SECRET_POST';\nexport const LOGOUT = 'LOGOUT';\n/*import jwtDecode from \"jwt-decode\";\r\n\r\nexport default class Auth {\r\n  user: null\r\n  token: \"\"\r\n  onUserChange = (newUser) => console.log(newUser)\r\n  constructor() {\r\n    this.decodeToken();\r\n    window.addEventListener(\"storage\", (e) => e.key === 'token' && this.decodeToken());\r\n  }\r\n\r\n  userChanged() {\r\n    this.onUserChange(this.getUser());\r\n  }\r\n\r\n  setToken(token) {\r\n    localStorage.setItem(\"token\", token);\r\n    this.decodeToken();\r\n    this.userChanged();\r\n  }\r\n\r\n  decodeToken() {\r\n    try {\r\n      this.token = localStorage.getItem(\"token\") || \"\";\r\n      this.user = jwtDecode(this.token);\r\n      this.userChanged();\r\n    } catch (e) {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.user = null;\r\n    this.token = \"\";\r\n    localStorage.setItem(\"token\", \"\");\r\n    this.userChanged();\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the\r\n    // access token's expiry time\r\n    return this.user && (new Date().getTime() < this.user.exp);\r\n  }\r\n  getUser() {\r\n    return this.user;\r\n  }\r\n}*/","map":{"version":3,"sources":["C:\\Users\\Dell\\Desktop\\front_reactjs-\\src\\actions\\types.js"],"names":["GET_ERRORS","SET_CURRENT_USER","SECRET_POST","LOGOUT"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,MAAM,GAAC,QAAb;AACP","sourcesContent":["export const GET_ERRORS = 'GET_ERRORS';\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\r\nexport const SECRET_POST = 'SECRET_POST';\r\nexport const LOGOUT='LOGOUT';\r\n/*import jwtDecode from \"jwt-decode\";\r\n\r\nexport default class Auth {\r\n  user: null\r\n  token: \"\"\r\n  onUserChange = (newUser) => console.log(newUser)\r\n  constructor() {\r\n    this.decodeToken();\r\n    window.addEventListener(\"storage\", (e) => e.key === 'token' && this.decodeToken());\r\n  }\r\n\r\n  userChanged() {\r\n    this.onUserChange(this.getUser());\r\n  }\r\n\r\n  setToken(token) {\r\n    localStorage.setItem(\"token\", token);\r\n    this.decodeToken();\r\n    this.userChanged();\r\n  }\r\n\r\n  decodeToken() {\r\n    try {\r\n      this.token = localStorage.getItem(\"token\") || \"\";\r\n      this.user = jwtDecode(this.token);\r\n      this.userChanged();\r\n    } catch (e) {\r\n      this.logout();\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.user = null;\r\n    this.token = \"\";\r\n    localStorage.setItem(\"token\", \"\");\r\n    this.userChanged();\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the\r\n    // access token's expiry time\r\n    return this.user && (new Date().getTime() < this.user.exp);\r\n  }\r\n  getUser() {\r\n    return this.user;\r\n  }\r\n}*/"]},"metadata":{},"sourceType":"module"}