{"ast":null,"code":"var _jsxFileName = \"/home/anhhuynh/front_reactjs-/src/components/navbar/ArticlePage.js\";\nimport React, { Component } from 'react';\nimport PlayerAPI from '../api';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { read } from 'fs'; // The Player looks up the player using the number parsed from\n// the URL's pathname. If no player is found with the given\n// number, then a \"player not found\" message is displayed.\n\nexport default class ArticlePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  /* const article = PlayerAPI.get(\n     parseInt(props.match.params.id, 10)\n   )\n   if (!article) {\n     return <div>Sorry, but the article was not found</div>\n   }\n   return (\n     <div>\n       <h1>{article.title}</h1>\n       <h2>Position: {article.content}</h2>\n       <Link to='/article'>Back</Link>\n     </div>\n   )\n  }\n  export default ArticlePage\n  */\n  async getData(props) {\n    const res = await axios.get(\"https://neunhuladinhmenh.herokuapp.com/api/polls/\".concat(props.match.params.id));\n    return await res.json();\n  }\n\n  componentDidMount() {\n    this.getData().then(data => this.setState({\n      data\n    })).catch(err => {\n      /*...handle the error...*/\n    });\n  }\n\n  render() {\n    const data = this.state.data;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, this.state.data ? React.createElement(\"em\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Loading...\") : this.state.data);\n  }\n\n}","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/components/navbar/ArticlePage.js"],"names":["React","Component","PlayerAPI","Link","axios","read","ArticlePage","state","data","getData","props","res","get","match","params","id","json","componentDidMount","then","setState","catch","err","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,QAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,IAArB,C,CACA;AACA;AACA;;AACA,eAAe,MAAMC,WAAN,SAA0BL,SAA1B,CAAoC;AAAA;AAAA;AAAA,SACjDM,KADiD,GACzC;AAENC,MAAAA,IAAI,EAAE;AAFA,KADyC;AAAA;;AAMlD;;;;;;;;;;;;;;;;AAiBD,QAAMC,OAAN,CAAeC,KAAf,EAAsB;AAIpB,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,GAAN,4DACoCF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBC,EADvD,EAAlB;AAGA,WAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAEd,SAAKR,OAAL,GAAeS,IAAf,CAAoBV,IAAI,IAAI,KAAKW,QAAL,CAAc;AAACX,MAAAA;AAAD,KAAd,CAA5B,EACeY,KADf,CACqBC,GAAG,IAAI;AAAE;AAA2B,KADzD;AAGL;;AACAC,EAAAA,MAAM,GAAI;AAAA,UACAd,IADA,GACQ,KAAKD,KADb,CACAC,IADA;AAEP,WACJ,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGC,KAAKD,KAAL,CAAWC,IAAX,GAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAlB,GAAwC,KAAKD,KAAL,CAAWC,IAHpD,CADI;AASF;;AAnDiD","sourcesContent":["import React, {Component}  from 'react'\nimport PlayerAPI from '../api'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios';\nimport { read } from 'fs';\n// The Player looks up the player using the number parsed from\n// the URL's pathname. If no player is found with the given\n// number, then a \"player not found\" message is displayed.\nexport default class ArticlePage extends Component {\n  state = {\n    \n    data: []\n  };\n\n /* const article = PlayerAPI.get(\n    parseInt(props.match.params.id, 10)\n  )\n  if (!article) {\n    return <div>Sorry, but the article was not found</div>\n  }\n  return (\n    <div>\n      <h1>{article.title}</h1>\n      <h2>Position: {article.content}</h2>\n      <Link to='/article'>Back</Link>\n    </div>\n  )\n}\n\nexport default ArticlePage\n*/\nasync getData (props) {\n  \n  \n  \n  const res=  await axios.get (\n    `https://neunhuladinhmenh.herokuapp.com/api/polls/${props.match.params.id}`\n  )\n  return await res.json();\n  \n\n}\ncomponentDidMount() {\n  \n      this.getData().then(data => this.setState({data}))\n                    .catch(err => { /*...handle the error...*/});\n  \n}\n render () {\n    const {data} = this.state;\n    return(\n<React.Fragment>\n        \n          \n{this.state.data ? <em>Loading...</em> : this.state.data}\n          \n          \n        \n        </React.Fragment>)\n }\n}\n"]},"metadata":{},"sourceType":"module"}