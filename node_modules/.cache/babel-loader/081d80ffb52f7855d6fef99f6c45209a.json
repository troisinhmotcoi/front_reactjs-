{"ast":null,"code":"export const GET_ERRORS = 'GET_ERRORS';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SECRET_POST = 'SECRET_POST';\nexport const LOGOUT = 'LOGOUT';\n/*import jwtDecode from \"jwt-decode\";\n\nexport default class Auth {\n  user: null\n  token: \"\"\n  onUserChange = (newUser) => console.log(newUser)\n  constructor() {\n    this.decodeToken();\n    window.addEventListener(\"storage\", (e) => e.key === 'token' && this.decodeToken());\n  }\n\n  userChanged() {\n    this.onUserChange(this.getUser());\n  }\n\n  setToken(token) {\n    localStorage.setItem(\"token\", token);\n    this.decodeToken();\n    this.userChanged();\n  }\n\n  decodeToken() {\n    try {\n      this.token = localStorage.getItem(\"token\") || \"\";\n      this.user = jwtDecode(this.token);\n      this.userChanged();\n    } catch (e) {\n      this.logout();\n    }\n  }\n\n  logout() {\n    this.user = null;\n    this.token = \"\";\n    localStorage.setItem(\"token\", \"\");\n    this.userChanged();\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    return this.user && (new Date().getTime() < this.user.exp);\n  }\n  getUser() {\n    return this.user;\n  }\n}*/","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/actions/types.js"],"names":["GET_ERRORS","SET_CURRENT_USER","SECRET_POST","LOGOUT"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,MAAM,GAAC,QAAb;AACP","sourcesContent":["export const GET_ERRORS = 'GET_ERRORS';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SECRET_POST = 'SECRET_POST';\nexport const LOGOUT='LOGOUT';\n/*import jwtDecode from \"jwt-decode\";\n\nexport default class Auth {\n  user: null\n  token: \"\"\n  onUserChange = (newUser) => console.log(newUser)\n  constructor() {\n    this.decodeToken();\n    window.addEventListener(\"storage\", (e) => e.key === 'token' && this.decodeToken());\n  }\n\n  userChanged() {\n    this.onUserChange(this.getUser());\n  }\n\n  setToken(token) {\n    localStorage.setItem(\"token\", token);\n    this.decodeToken();\n    this.userChanged();\n  }\n\n  decodeToken() {\n    try {\n      this.token = localStorage.getItem(\"token\") || \"\";\n      this.user = jwtDecode(this.token);\n      this.userChanged();\n    } catch (e) {\n      this.logout();\n    }\n  }\n\n  logout() {\n    this.user = null;\n    this.token = \"\";\n    localStorage.setItem(\"token\", \"\");\n    this.userChanged();\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    return this.user && (new Date().getTime() < this.user.exp);\n  }\n  getUser() {\n    return this.user;\n  }\n}*/"]},"metadata":{},"sourceType":"module"}