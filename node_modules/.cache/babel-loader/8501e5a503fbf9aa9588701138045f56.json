{"ast":null,"code":"import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\nimport { history } from '../helper';\nimport { Redirect } from 'react-router';\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('http:localhost:8000/api/user/register', user).then(res => history.push('/login')).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const loginUser = (email, password) => dispatch => {\n  //server not accept json data so i use qs (form data urlencode)\n  const auth = qs.stringify({\n    email,\n    password\n  });\n  axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/login', auth, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  }).then(handleResponse)\n  /*.then(         \n      res=>{\n      res.json();\n      const { token } = res.data.token;\n      localStorage.setItem('jwtToken', token);\n      setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(setCurrentUser(decoded));\n  },\n  )*/\n  .catch(res => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: {}\n    });\n  });\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\nfunction handleResponse(res) {\n  return res.json().then(res => {\n    if (!res.data.token) {\n      // auto logout if 401 response returned from api\n      const error = 'sai';\n      return error;\n    } else {\n      history.replace('/');\n    }\n  });\n}","map":{"version":3,"sources":["/home/anhhuynh/front_reactjs-/src/actions/authentication.js"],"names":["axios","GET_ERRORS","setAuthToken","jwt_decode","qs","SET_CURRENT_USER","history","Redirect","registerUser","user","dispatch","post","then","res","push","catch","err","type","payload","loginUser","email","password","auth","stringify","headers","handleResponse","setCurrentUser","decoded","json","data","token","error","replace"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,QAAT,QAA0B,cAA1B;AAGA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOH,OAAP,KAAmBI,QAAQ,IAAI;AACvDV,EAAAA,KAAK,CAACW,IAAN,CAAW,uCAAX,EAAoDF,IAApD,EACSG,IADT,CACcC,GAAG,IAAIP,OAAO,CAACQ,IAAR,CAAa,QAAb,CADrB,EAESC,KAFT,CAEeC,GAAG,IAAI;AACVN,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEhB,UADD;AAELiB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAPT;AAQH,CATM;AAWP,OAAQ,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAoBX,QAAQ,IAAI;AAC1D;AACG,QAAMY,IAAI,GAAElB,EAAE,CAACmB,SAAH,CAAa;AAACH,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAb,CAAZ;AACCrB,EAAAA,KAAK,CAACW,IAAN,CAAW,uDAAX,EAAmEW,IAAnE,EAAyE;AAAEE,IAAAA,OAAO,EAAE;AAChF,sBAAgB;AADgE;AAAX,GAAzE,EAKSZ,IALT,CAKca,cALd;AAMQ;;;;;;;;;;AANR,GAoBSV,KApBT,CAoBeF,GAAG,IAAI;AACVH,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEhB,UADD;AAELiB,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GAzBT;AA0BH,CA7BO;AA8BR,OAAO,MAAMQ,cAAc,GAAGC,OAAO,IAAI;AACrC,SAAO;AACHV,IAAAA,IAAI,EAAEZ,gBADH;AAEHa,IAAAA,OAAO,EAAES;AAFN,GAAP;AAIH,CALM;;AAMP,SAASF,cAAT,CAAwBZ,GAAxB,EAA6B;AACzB,SAAOA,GAAG,CAACe,IAAJ,GAAWhB,IAAX,CAAgBC,GAAG,IAAG;AAEzB,QAAI,CAACA,GAAG,CAACgB,IAAJ,CAASC,KAAd,EAAqB;AAEb;AAGJ,YAAMC,KAAK,GAAG,KAAd;AACA,aAAOA,KAAP;AACH,KAPD,MASA;AAACzB,MAAAA,OAAO,CAAC0B,OAAR,CAAgB,GAAhB;AAAqB;AACzB,GAZM,CAAP;AAaH","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS } from './types';\nimport setAuthToken from '../setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport qs from 'qs';\nimport { SET_CURRENT_USER } from './types';\nimport { history } from '../helper';\nimport { Redirect }  from 'react-router';\n\n\nexport const registerUser = (user, history) => dispatch => {\n    axios.post('http:localhost:8000/api/user/register', user)\n            .then(res => history.push('/login'))\n            .catch(err => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\n\nexport  const loginUser = (email,password) => dispatch => {\n//server not accept json data so i use qs (form data urlencode)\n   const auth= qs.stringify({email,password})\n    axios.post('https://neunhuladinhmenh.herokuapp.com/api/user/login',auth ,{ headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }}\n  )\n\n            .then(handleResponse)  \n            /*.then(         \n                res=>{\n\n               res.json();\n                const { token } = res.data.token;\n                localStorage.setItem('jwtToken', token);\n                setAuthToken(token);\n                const decoded = jwt_decode(token);\n                dispatch(setCurrentUser(decoded));\n            },\n            )*/\n            \n\n            \n            .catch(res => {\n                dispatch({\n                    type: GET_ERRORS,\n                    payload: {}\n                });\n            });\n}\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\nfunction handleResponse(res) {\n    return res.json().then(res=> {\n        \n        if (!res.data.token) {\n            \n                // auto logout if 401 response returned from api\n            \n\n            const error = 'sai';\n            return error;\n        }\nelse\n        {history.replace('/')}\n    });\n}"]},"metadata":{},"sourceType":"module"}